// px to rem  font-size: rem(16);
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}

/*================================================================= */
// px to em  font-size: em(16);
@function em($px) {
  $result: math.div($px, 18) + em;
  @return $result;
}
/*================================================================= */

// Адаптивное свойство
$minWidth: 320; // Минимальная ширина страницы
$maxWidth: 1920; // Ширина полотна (макета)
$maxWidthContainer: 1500; // Ширина ограничивающего контейнера (0 = нет ограничения)
$containerPadding: 60; // Общий отступ у контейнера (30 = по 15рх слева и справа, 0 = нет отступа)

$containerWidth: $maxWidthContainer + $containerPadding; // Ширина срабатывания первого брейк-поинта

// Брейн-поинты
$pc: em($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98); // Телефоны L
$mobileSmall: em(479.98); // Телефоны S

// Тип адаптива: 1 = отзывчивый (у контейнера нетбрейк-поинтов), 2 = по брейк-поинтам (контейнер имеет свою ширину по брейк-поинтам)
$responsiveType: 1;

/*
(i) Стили будут применятьсяя ко всем классам содержащим *__container
Например header__container, main__container и т.д.
Спипет (HTML): cnt
*/
@if ($responsiveType==1) {
  // Отзвычивая
  [class*='__container'] {
    @if ($maxWidthContainer>0) {
      max-width: rem($maxWidthContainer);
      box-sizing: content-box;
      margin: 0 auto;
    }
    @if ($containerPadding>0) {
      padding: 0 rem(math.div($containerPadding, 2));
    }
  }
} @else {
  // По брейк-поинтам
  [class*='__container'] {
    margin: 0 auto;
    @if ($maxWidthContainer > 0) {
      max-width: rem($maxWidthContainer);
      box-sizing: content-box;
    } @else {
      @if ($containerPadding > 0) {
        padding: 0 rem(math.div($containerPadding, 2));
      }
    }
    @media (max-width: $pc) {
      max-width: rem(970);
    }
    @media (max-width: $tablet) {
      max-width: rem(750);
      // padding: 0 16px;
    }
    @media (max-width: $mobile) {
      max-width: none;
      @if ($containerPadding > 0 and $maxWidthContainer > 0) {
        padding: 0 rem(math.div($containerPadding, 2));
      }
    }
  }
}

// Адаптивное значение
@mixin adaptiveValue($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
      );
    }
  } @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
      );
    }
  } @else {
    // Всегда
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
    );
  }
}
/*========================== Пример использования ================
.block__body {
  @include adaptive-value("padding", 50, 20, 0);
}
================================================================= */

// Адаптивный шрифт
@mixin adaptiveFont($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $addMobSize: $addSize + ($addSize * 0.7);
  @media (min-width: 767px) {
    font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
  }
  @media (max-width: 768px) {
    font-size: calc(#{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$maxWidth}));
  }
}
/*========================== Пример использования ================
.block__body {
  @include aadaptiveFont(40, 20); 
}
================================================================= */
